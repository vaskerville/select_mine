'use strict';

var
  chalk = require('chalk'),
  program = require('commander'),
  rpc = require('json-rpc2');

function base64(value){
  if (value) {
    var b = new Buffer(value);
    return b.toString('base64');
  } else {
    return '';
  }
}

function blockLen(value){
  value = value.toString();

  if (/[^a-f0-9]/i.test(value) || value.length < 64) {
    console.log(chalk.red('Invalid block hash supplied'));
    return '';
  }

  return value;
}

function notifies(value){
  var types = ['wallet','alert','block'];
  value = value.toString().toLowerCase();

  if (types.indexOf(value) < 0) {
    console.log('Type must be one of these: ' + types.join(', '));
    return '';
  }

  return value;
}

function json(value){
  value = value.toString();



  return value;
}

program
  .option('--host <host>', 'Host where the stratum server is running')
  .option('--port <port>', 'The port the stratum server is running', parseInt)
  .option('--password <password>', 'The password set in the stratum server', base64)
  .option('--type <type>', 'Type of notify, can be alert, block and wallet', notifies)
  .option('--data <data>', 'The data to be passed to the server', json)
  .option('--source <name>', 'The daemon source')
  .parse(process.argv);

if (!program.host || !program.port || !program.password || !program.data || !program.source || !program.type) {
  console.log(chalk.yellow('All options must be set'));
  program.help();
} else {
  var client = rpc.Client.create(
    program.port,
    program.host
  );

  var socket = client.connectSocket(function (err, conn){
    socket.removeAllListeners('end');

    conn.call('mining.' + program.type, [program.password, program.data, program.source], function (err, result){
      if (err) {
        throw err;
      } else {
        console.log(result);
      }

      socket.end();
    });
  });

  socket.on('end', function(){
    console.log(chalk.grey('Connection closed'));
  });

  socket.on('error', function(){
    console.log(chalk.grey('Failed to connect to host'));
  });
}